# RvSnoop Features Roadmap

    $Id$

This file contains an overview of the planned features in future
versions of RvSnoop. Any alterations should be formatted using
[Markdown][MD] syntax.

## Web Site

Project display name: RvSnoop
Development status: remove 4, mark as 5 (stable)
Translations: remove swedish (for now)
License: ASL 2.0 (be specific about version)

Update description to match version.xml text.

## Release 1.7 - 2007Q1

Add a warning to the release note that this will be the last version to
support Java 1.4, RvSnoop 2.0 will be based on the J2SE 5.0 class libraries.

### (DONE) Created separate user and developer guides.
### (DONE) Changed the logging system to use Commons Logging.
### (DONE) Added an HTML formatted report of the JUnit test results.
### (DONE) Changed the command parser to use Commons CLI.
### (DONE) Update Copyright Notices.

### (2001-01-14) Create RecordBundleV1 Class.

Created RecordBundleV1 class and moved all record bundle logic into it.

The name is because I will add a RecordBundleV2 as well which can store more
information and metadata. V2 should allow storing of connections.xml,
types.xml, subjects.xml (probably in a meta/ folder in the ZIP). It should
allow records to be selectively imported based on these criteria. Also, all
entried should be checksummed.

    public class RecordBundleV1 {
        public RecordBundleV1() { /* For streamed writing. */ }
        public RecordBundleV1(File bundle) { /* Reading */ }
        public RecordBundleV1(InputStream stream) { /* Reading */ }
        public RecordBundleV1(Record[] records) { /* Writing, closed afterwards. */ }
        public RecordBundleV1(Record[] records, int compression) { /* Writing, closed afterwards. */ }

        public void addRecord(Record record) throws IllegalStateException { }
        public void close() { }
        public String getHeaderInfo() { }
        public Iterator getRecords() { }
        public void setCompression(int level /* 0-9 */) throws IllegalStateException { }
        public int size() { }
    }

    public class NonWritableBundleException extends IllegalStateException {
        // Either the bundle has been opened for reading or the bundle
        // has been opened for writing but close() has been called.
    }

Header info should be, e.g.

    RvSnoop Record Bundle (V1).
    Created by RvSnoop 1.7.0.
    Created on 2007-01-22 at 17:22:44.

How to get this if no getComment() method on ZipInputStream ? May have to bin
that method, but still write the header for the benefit of other tools. Maybe
look at TrueZIP library to see if they read comments?

### (2001-01-14) Rename Actions to ActionFactory.

Rename Actions to ActionFactory, make all actions public and have their action
commands as static fields (called COMMAND).

Look at gui-commands for some ideas about how to use the action factory to
create components. Maybe something like:

    public JButton createButton(String command, boolean toolbar) { }
    public JMenuItem createMenuItem(String command) { }

Add a method to UIUtils to create menus:

    public JMenu createMenu(String name, KeyStroke accel, int mnemonic, String iconName) { }

Move UIUtils#createSmallButton to UIManager

### (2001-01-21) Update build.xml to use betterdocs.

Changed genjavadoc target to use betterdoc tool from XOM (converts nasty Sun
markup into clean XHTML 1.0 Frameset).

### (2001-01-21) Update build.xml to Create Nice Lint4J Reports.

Write ann XSLT 2.0 stylesheet to convert the Lint4J XML report into a bunch of
XHTML file. Look at this article for a starter:

    http://www-128.ibm.com/developerworks/xml/library/x-tipmultxsl.html

Note that the XML report in Lint4J 0.9.1 reports the wrong version, it claims
to be created with 0.8.1!

### Make Projects be Directory Based

With an rvsnoop-project.xml file, use the folder name for the
project name, add an rvsnoop-project.xml file for project metadata;
this should include record types and connections, in future it
should also store probes and any other project artifacts. There
should also be a subjects.xml file with the subject hierarchy in it.
Later we may want to add an undo-history.xml file with the undo
history in it.

An alternative approach would be to use multiple small files with
different types of data in each?

rvsnoop-project.xml
connections.xml
types.xml
subjects.xml

In either case, we need to have a migrator for the RSP file format.
This should create a new directory with the same name (sans the .rsp
extension), then migrate the contents of the rsp file to the various
project files.

Subfolders in the project could include...

* messages

  For all of the message bodies and meta data, message bodies have a
  '.msg' extension, metadata files have .meta extension. Note: if
  timestamps are going to be stored as longs we will need to add
  timezone information to the project file.

* index

  For the lucene index files

### (2001-01-14) Add ConnectionList and MessageLedger Selection Events

Use these to enable/disable actions. This should use
`KeyboardFocusManager`, and look at the way Eclipse handles focus
management for ideas.

    public interface RecordLedgerSelectionListener extends EventListener {
        public void valueChanged(RecordLedgerSelectionEvent event);
    }

    public interface ConnectionListSelectionListener extends EventListener {
        public void valueChanged(ConnectionSelectionEvent event);
    }

Give the action factory `ListSelectionListener`s which in turn redirect to
listeners of these interfaces. Probably best not to fire the redirected events
if the valueIsAdjusting property is set on the original list.

    public final class RecordLedgerSelectionEvent extends EventObject {
        public boolean isSelectionEmpty() { }
        public Record[] getSelectedRecords() { /* create lazily? */ }
        public int[] getSelectedIndices() { /* cteate lazily? */ }
    }

### (2001-01-14) Clean Up the StatusBar Code

The status bar should listen for change events and update itself. Also, it
could be made more RvSnoop specific, at the moment it's some fairly generic
code that was copy/pasted from another project.

### Add A Real ErrorDialog

This should show a helpful message and have the following options:

* Quit - call Application.shutdown()
* Send Report - email a report using Java Mail
* Show Details - should show the stack trace in a tree
* Continue (OK)

### Sniff Opaques for Serialized Java Data

This should show some information about the serialized object and
allow methods to be invoked where they take no arguments, or only
primitive values. Probably just include viewing in this version.

### Check for Changes to the Config Files Before Saving

Use CRC32 or similar, hash on opening and save hash. If the hash is
different when we go to write the file pop a dialog asking for
confirmation.

### Add String Flavour Support to RecordSelection

Use the marshaller to serialize records to strings.

Some thought needs to be given as to how we will handle the default
copy behaviour, my current thinking is that the default should be to
copy byte streams (like it does now), but maybe add a menu option to
"copy as ..." for the different marshaller types.

A though occurs here that I should include a default XML
serialization format for messages, the ideal would be to agree a
format with Stefan then it can be shared between RvSnoop and
RvScript, probably the best approach would be to just use the
RvScript format but stuff it into a namespace, hopefully Stefan will
agree to use this approach in a new version of RvScript.

This is mentioned in feature request [#1579647][FR1579647] in SF.

[FR1579647]: https://sf.net/tracker/?func=detail&atid=504011&aid=1579647&group_id=63447

### Add Selectable Support to the Details Panel

To allow cut/paste of field values.

### Move Preferences to a Dedicated Dialog

Get rid of the configure menu. Think about how preferences will be
organized, bearing in mind the long term plan to move to something
like an OSGi runtime. The trick here is to move to something that
would then be easy to port to the OSGi system.

Ideally this would use the java.util.prefs classes but the default
implementations suck big time. Look into how much work it would be
to implement our own preferences class.

If there is a 'facade' of JavaBeans over the underlying preferences
classes then it becomes easy to use binding & validation to present
a user interface.

Include an option to show date & time vs. only time in the ledger.

* Create a panel to allow configuration of fonts & colours.

* Create a panel to allow configuration of date & time views.

### Add an Export Dialog (or Wizard)

Have the different export formats available via a combo box.

### Move to a Single FilterLedger Action with a Dedicated Dialog

Have edit filter and filter by selection actions. Filter by
selection should try to produce a filter matching all selected
records.

The first time filter is applied it should work like filter by
selection, afterwards it should edit the current filter.

There should be a single AbstractSearchAction class which handles editing the
filter and applying it to a ledger. Subclasses will be:

* Search - opens a new 'active search' dialog with a new filtered view in
* SearchBySelection
* Filter - applies the filter to the current ledger based on previous search
* FilterBySelection

Next steps to complete this task:

   * Test FilterBySelection
   * Write the multi-record selection filter
   * Write a SearchResultsDialog displaying a live/frozen search list.
   * Update Search to use the new framework.
   * Write SearchBySelection based on new Search and FilterBySelection.

Maybe move the populate(...) methods to the AbstractSearchAction class so they
can be shared by SearchBy... and FilterBy...

### Prepare All Strings for I18N

A neat idea would be to write a script that automatically creates
transaltions via google. Of course these should be checked by hand
if possible before shipping.

Note that at this stage we're just talking about strings and icons, not other
resources (i.e. documentation).

* Speak to Orjan L about getting a Swedish translation.

* Speak to Jone A about getting a Norwegian translation.

### (2001-01-14) Refactor MessageLedger

Cleanly separate out the message ledger (which deals with storing
records and should be renamed to RecordLedger) and the filtered view
(which should be named FilteredLedgerView).

Change the package to org.rvsnoop, make non-static (add instances to
StartRvSnooper and UIManager), add test cases and documentation.

1. Finish rewriting the search & filter code.
2. Refactor the RecentConnections and Connections classes.
3. Remove this class.

### (2001-01-07) Refactor the RecentConnections and Connections classes.

There should be a single class, it should have 2 constructors, one
should take a maxSize parameter, this controls the number of entries
that are allowed. When called with this constructor the connection
list is *passive*, that it, it works like RecentConnections (does
not try to start and/or stop the connections).

The other constructor takes no arguments and works like the current
Connections class.

Or have a Connections class with an ActiveConnections filter around
it (similar to the RecordLedger/FilteredLedgerView classes). The class should
use HAS-A composition instead of IS-A inheritance, like RecordLedger does.

Basically, the import & export functionality needs to be common to
the 2 classes. NO! RecentConnections is a preference and must be stored as
such (i.e. property list).

This will also allow passive connections lists to be used in other places
(e.g. filter lists).

### Refactor the RecordType and RecordTypes classes.

Use the 'active list' pattern like the connections class.

Make the RecordTypes class observe property changes on the type instances and
use these to constrain and relax the matcher editor when the "selected"
proprty is changed.

### (2001-01-07) Rewrite PreferencesManager to use java.util.prefs

    Preferences.userRoot().node("org").node("rvsnoop").node("sessionState");

Add a field to ColumnFormat for width. Make add/remove methods take
identifiers instead of column objects (use Iterator#remove()).

When a new main window is opened it should register itself with the
preferences manager, the prefs mnager needs to maintain weak refs to the open
windows then it can try to always store some preferences.

### Rewrite `RecordTypesDialog` to use a `JList` of `RecordTypePanel`s

For the panel use forms layout with fixed sized for everythiong apart from the
value field. Change the button label to "Close".

Use cube_blue.png for recordTypeEnabled and recordTypeDisabled images in the
list. Use a list which supports dragging/ordering directly.

### Add an XMLBuilder class that uses a fluent interface.

This could wrap either XMLenc or XOM. Probably XMLEnc would be better, create
it with something like:

    public final class XMLBuilder {
        /**
         * @param stream The stream to write to.
         * @param ns The default namespace for the document.
         * @param namespaces A namespace to prefix mapping for the document.
         */
        public XMLBuilder(OutputStream stream, String ns, Map<String,String> namespaces) {
            
        }
        public XMLBuilder attribute(String name, String value) { }
        public XMLBuilder attribute(String name, String value, String ns) { }
        public void close() { }
        public XMLBuilder comment(String text) { }
        public void dtd(String name, String publicID, String systemID) { }
        public XMLBuilder endTag() { }
        public XMLBuilder pcdata(String text) { }
        public XMLBuilder startTag(String type, String ns) { }
    }

## Release 2.0 - 2007Q3

There isn't really a target release date for 2.0 yet, but assume
sometime towards the end of 2007, exactly when depends on how
ambitious we get with new features.

### Move to Either the Java SPI or OSGi Runtime Mechanism

See the [Sun web site][JSPI] for details. Also note that the Service
class is `sun.misc.Service`. Or, a possibly better but more
intrusive change would be switch to an [OSGi runtime][OSGI],
possibly [Equinox][EE] from Eclipse or the [Knopflerfish][KF] OSGi
runtime. Using OSGi in this way would make these mechanisms
extension points for a 'core' bundle.

* The export/marshalling mechanism.

* The action manager.

  This may or may not be a good idea, it could be a neat way to
  allow custom actions to be added however. This would ideally need
  a means of adding custom actions to the menu bar and tool bar,
  which would either need these to be built up dynamically or at
  least have well known "addition" points in them.

* A mechanism for displaying custom data types in a smart manner.

* To be used in the ledger and detail views.

* Filters to be used when searching and matching record types.

* Possibly ledger persistence providers.

  This should probably be added after 2.0, either as a point release
  or in the next major revision.

Bundles:

    org.rvsnoop
    org.rvsnoop.ui
    org.rvsnoop.help
    org.rvsnoop.rv
    org.rvsnoop.rv.ui
    org.rvsnoop.rv.help
    org.emssnoop
    org.emssnoop.ui
    org.emssnoop.help

### Add LedgerSnoop Tool Based on TIB Ledger Viewer Type Idea

    org.rvsnoop.ledger
    org.rvsnoop.ledger.ui
    org.rvsnoop.ledger.help

### Add Support for Flying Saucer and use that to Display Help, &c.

Not too sure how useful this will be in practice, it may make more
sense to clean up the browserlauncher code and stick with that. An
alternative would be to move to a JavaHelp based system.

Maybe a help window with a tree on the left and an XHTML display on the right,
load the tree contents by pointing at a directory (e.g. doc) and looking for
map.xml files in it. directories map to tree nodes with children, map.xml
files should be something like:

    <helpset url=".">
        <page name="introduction" url="index.html"/>
        <book name="userguide" url="user">
            <page name="introduction" url="index.html"/>
            <page name="features" url="features.html"/>
            <page name="starting" url="starting.html"/>
            <page name="connections" url="connections.html"/>
            <page name="filtersearch" url="filtersearch.html"/>
            <page name="editpublish" url="editpublish.html"/>
            <page name="importexport" url="importexport.html"/>
        </book>
    </helpset>

Use the name attribute as a `ResourceBundle` key for I18N, allow the URLs to
be processed for I18N as well (e.g. starting.html := starting_fr.html).

Maybe helpset.map and helpset.properties for the file names.

### Add in Support for Persistent Message Stores.

I'm unclear as to when this should happen, in 1.7 or 2.0? Probably
2.0 as it'll be a big change. What follows is some thinking based on
the use of BDBJE as a messaage store and other ideas, I'm not sure
all of them are good ones!

An alternative to [BDBJE] would be to just use a simple on disk
serialization format. Or maybe a hybrid of the two. Use BDBJE for
the meta-data (any free text indexes!) and serialize the actual
messages to disk, this could be handled via the serialization format
or just by writing the raw toByteArray() output to a file. I'd
prefer to use the serialization format but provide a utility to
strip it if required (Snoop Serialized Object or xxxxxx.sso for the
file name).

Record may need to have 2 IDs, one for the original sequenceNumber
(as used to persist the record) and another for the rowNumber, which
would allow for records being deleted.

Look into using deferred write databases, maybe as a configuration
option. Do a sync on a scheduled basis, or every X messages maybe.

* Look at the RecordSelection code to reuse in tuplebindings.

* For stream format use:

      RVMBSF01 - magic string - RV message byte stream format
      int - number of messages
      ...

  For each message use

      RVMBSF02 - magic string
      connection - connection - store as name or serialized data?
      long - timestamp
      bytebuffer - message.toByteArray()
      ...

* Or maybe just use a disk based storage mechanism and Lucene?

  This would probably need some sort of minimal indexing scheme to
  map records to row numbers, and vice versa. Fields in the record
  would become document fields in the lucene index. If it makes
  lucene faster, it may still make sense to use a BDB backed index.

* Or maybe something based on Carbonado?

* Or maybe an embedded database (H2 looks good)?

  H2 will support BLOBs as external files in the 1.1 release, this
  would make it a good contender for a persistent store. Actually, I
  think that it already does support BLOBs this way.

### Write a *much* Better XHTML Exporter

Get rid of the marshaller code, but still allow a custom marshalling
hook to be used for exporting though.

Provide a smart JavaScript & CSS library with the reports to allow
collapsible trees to be used in the table, and table sorting. Embed
the JS & CSS though, don't use separate files.

### Add in Support for JList as well as JTree based subject views

Like the package explorer in IntelliJ. This could maybe be done with
a 'SubjectViewProvider' SPI.

### Add a Real Submit Bug Action and Dialog

Maybe. This would require logging in to SF and submitting the
correct form values. It should be possible using Commons HTTP
Client. Or moving to a different provider of 'project services'.

### Add a Preview Accessory to the File Chooser

This should show the project name and a list of connections.

### Add Charting

This should allow arbitrary fields from arbitrary subject patterns
to be added to a chart. This will need a simple way of referring to
fields from messages, it should be possible to set up a chart by
clicking on a sample message and selecting some fields. Maybe "Add
Probe..." to add a data capture probe, this could then be plotted on
a chart. Probes could be added via an SPI interface.

The code to select fields in a message should be generic, and should
ideally be compiled rather than parsed at each invocation, this way
it could be used to grab fields from a "causal chain" as well. Maybe
make it XPath based using either Saxon-B or Jaxen?

### Make Minimum Java Version 1.5

Should be OK since TIBCO will have been 1.5 based for at least a
year by the time 2.0 is released.

Probably rearrange the package names to be org.rvsnoop instead of
rvsnoop while we are at it.

This will allow us to easily use the JavaBeans binding (JSR-295) and
Fabric app framework, although we would want to modify them
slightly. Although, if we move to OSGi we won't need the Fabric
framework; and I'm starting to think that JGoodies Forms & Binding
are better than GroupLayout & JSR-295, so we may want to stick with
those.

The SwingX stuff is cool though.

## Unspecified Future Version & Refactoring

These features should probably be blogged about to solicit feedback,
then they can be slotted in to releases as demanded. Note that some
of these ideas are pretty pie-in-the-sky but it's good to try to
keep track of them somewhere!

### Scripting Support

Add a Scriptable interface and an execute(String) method on the action factory
class. The execute method should peek at the command line then use Commons CLI
to parse it, ask the action for the Options.

    public interface Scriptable {
        public void execute(CommandLine command) throws Exception;
        public String getHelpString();
        public Options getOptions();
    }

Maybe add a 'macro recorder' menu option, this would need to add an interface
to support it:

    public interface Recordable {
        public ? record();
        public void play(?);
    }

Where record and play take enough information to recreate the event. Maybe
some type of XML?

### Improve RecordMatcher

Generalize it to NamedMatcher. Add a method for isValueValid which could be
used in GUI validators. Or throw an exception for invalid values.

### Move to Using MultiSplitPane for the Main Window Layout

Create a project based on MultiSplitPane but ported to Java 1.4.2
(maybe). Enhance this so that it has collapsible panes and named
panes. Look at iTunes for UI design. Move RvSnoop to use this
project instead of nested JSplitPanes

### Add a View to Display XML Documents as Text

Use styled text to provide highlighting for elements, etc. nShould
there be preferences to display XML inline in the details view?
Should it be a context action to view in a new window? Or a
double-click action on XML document fields?

### Write a Custom Look & Feel

Base this on PlasticXP, use the gradient caching stuff from
Mustang's Synth L&F. This is really a *lot* of work, but maybe some
features could be written independently and used as stand alone UI
delegates?

### Draw Custom Icons

This, of course, assumes that I have some artistic skill, which is
probably bullshit!

### Add a "Tip of the day" Dialog

Or maybe a "Productivity Tips" progress dialog like IntelliJ IDEA uses.

### Integrate a Rules Engine

A first step towards features like this may be to generalize and
expand the matcher support. Split things like record types into
matchers and actions.

### Add More Visualizations for Data

For example, add [sparklines][SL] to the subject explorer tree to
represent message rates and bytes. Probably a good idea to buy the
[new Tufte book][BE] for ideas.

[BE]:   http://www.edwardtufte.com/tufte/books_be
[EE]:   http://www.eclipse.org/equinox
[JSPI]: http://java.sun.com/j2se/1.4.2/docs/guide/jar/jar.html#Service%20Provider
[KF]:   http://www.knopflerfish.org/
[MD]:   http://daringfireball.net/projects/markdown
[OSGI]: http://www.osgi.org/
[SL]:   http://www.representqueens.com/spark/
