<?xml version='1.0' encoding='utf-8'?>
<!-- Build file tested with Ant version 1.6.5. -->
<!-- $Id$ -->
<project name="rvsnoop" default="printusage" basedir=".">
  <description>A TIBCO Rendezvous message viewing utility.</description>

  <!-- Display a short help message and exit. -->
  <target name="printusage">
    <echo>Use "ant -projecthelp" to get a list of build targets.         </echo>
    <echo>                                                               </echo>
    <echo>Copy build.properties to local.properties and configure your   </echo>
    <echo>build environment. This will prevent your changes from being   </echo>
    <echo>overwritten when you synchronize your working folder.          </echo>
    <echo>                                                               </echo>
    <echo>You will need to add the JUnit JAR to your CLASSPATH in order  </echo>
    <echo>to run the unit tests (and thus to build a distribution).      </echo>
  </target>

  <!-- Set the timestamps and read the properties file. -->
  <target name="settimestamp">
    <tstamp/>
    <tstamp><format property="build.date" pattern="yyyy-MM-dd HH:mm:ss"/></tstamp>
    <tstamp><format property="build.year" pattern="yyyy"/></tstamp>
    <property file="local.properties"/>
  </target>

  <!-- Get the build version. -->
  <target name="setbuildversion" unless="svnversion.offline" depends="settimestamp">
    <exec executable="${svnversion}" spawn="false" dir="." output="build.number" failifexecutionfails="false">
      <arg line="."/>
    </exec>
    <replaceregexp file="build.number" match="([0-9]+).*" replace="build.svnversion=\1" />
    <property file="build.number" />
    <delete file="build.number" />
  </target>
    
  <!-- Configure the properties and filtersets. -->
  <target name="setproperties" depends="setbuildversion">
    <property name="version.major" value="1"/>
    <property name="version.minor" value="6"/>
    <property name="version.patch" value="1"/>
    <property name="version.alpha"  value="false"/>
    <property name="version.beta"  value="false"/>
    <property name="version" value="${version.major}.${version.minor}.${version.patch}"/>
    <property name="dir.stage"     value="stage"/>
    <property name="dir.build"     value="build"/>
    <property name="dir.dist"      value="dist/rvsnoop-${version}"/>
    <!-- Import environment variables as properties, prefixed with "env". -->
    <property environment="env"/>
    <path id="path.class">
      <!-- Define our class path first. -->
      <pathelement location="${tibco.rv}/lib/tibrvj.jar"/>
      <pathelement location="${tibco.sdk}/lib/TIBCOrt.jar"/>
      <pathelement location="${tibco.rvscript}"/>
      <pathelement location="${tibco.rvtest}"/>
      <pathelement location="${lib.binding}"/>
      <pathelement location="${lib.forms}"/>
      <pathelement location="${lib.glazed}"/>
      <pathelement location="${lib.io}"/>
      <pathelement location="${lib.lang}"/>
      <pathelement location="${lib.logging}"/>
      <pathelement location="${lib.looks}"/>
      <pathelement location="${lib.xmlenc}"/>
      <pathelement location="${lib.xom}"/>
      <!-- Append the system class path. -->
      <pathelement path="${env.java.class.path}"/>
    </path>
    <condition property="build.number" value="${build.svnversion}" else="0">
      <isset property="build.svnversion"/>
    </condition>
    <echo>Build number set to ${build.number}.</echo>
    <filterset id="filters">
      <filter token="version.major" value="${version.major}"/>
      <filter token="version.minor" value="${version.minor}"/>
      <filter token="version.patch" value="${version.patch}"/>
      <filter token="version.alpha" value="${version.alpha}"/>
      <filter token="version.beta"  value="${version.beta}"/>
      <filter token="version"       value="${version}"/>
      <filter token="java.vendor"   value="${java.vendor}"/>
      <filter token="java.version"  value="${java.version}"/>
      <filter token="os.name"       value="${os.name}"/>
      <filter token="os.version"    value="${os.version}"/>
      <filter token="os.arch"       value="${os.arch}"/>
      <filter token="build.number"  value="${build.number}"/>
      <filter token="build.date"    value="${build.date}"/>
      <filter token="suffix"        value="${file.suffix}"/>
      <filter token="year"          value="${build.year}"/>
    </filterset>
  </target>

  <target name="stage" depends="setproperties"
          description="Prepare the files for the build.">
    <mkdir dir="${dir.stage}/bin"/>
    <mkdir dir="${dir.stage}/doc/developer"/>
    <mkdir dir="${dir.stage}/src"/>
    <mkdir dir="${dir.stage}/tests"/>
    <mkdir dir="${dir.stage}/www"/>
    <echo>Moving all files to staging area: ${dir.stage}</echo>
    <copy todir="${dir.stage}" file="version.xml">
      <filterset refid="filters"/>
    </copy>
    <copy todir="${dir.stage}/bin">
      <filterset refid="filters"/>
      <fileset dir="bin" includes="*.cmd, *.sh"/>
    </copy>
    <copy todir="${dir.stage}/bin">
      <fileset dir="bin" includes="*.ico"/>
    </copy>
    <chmod dir="${dir.stage}/bin" includes="*.sh" perm="750"/>
    <copy todir="${dir.stage}/src" encoding="UTF-8">
      <filterset refid="filters"/>
      <fileset dir="src" includes="**/*.java, **/*.properties"/>
    </copy>
    <copy todir="${dir.stage}/src">
      <fileset dir="src" includes="**/*.png"/>
    </copy>
    <copy todir="${dir.stage}/tests" encoding="UTF-8">
      <filterset refid="filters"/>
      <fileset dir="tests" includes="**/*.java"/>
    </copy>
    <copy todir="${dir.stage}/tests">
      <fileset dir="tests" includes="**/*.rbz"/>
    </copy>
    <copy todir="${dir.stage}/doc">
      <filterset refid="filters"/>
      <fileset dir="doc" includes="**/*.html"/>
    </copy>
    <copy todir="${dir.stage}/doc">
      <fileset dir="doc" includes="**/*.png, **/*.css"/>
    </copy>
    <copy todir="${dir.stage}/www">
      <filterset refid="filters"/>
      <fileset dir="www" includes="*.html, *.css"/>
    </copy>
    <copy todir="${dir.stage}/www">
      <fileset dir="www" includes="**/*.png, **/*.gif"/>
    </copy>
  </target>

  <target name="compile" depends="stage"
          description="Compile all of the Java class files (including tests).">
    <javac srcdir="${dir.stage}/src" destdir="${dir.build}/classes/main" includes="**/*.java"
           debug="${javac.debug}" optimize="${javac.optimize}" encoding="UTF-8"
           deprecation="${javac.deprecation}" source="1.4" target="1.4">
      <classpath refid="path.class"/>
    </javac>
    <javac srcdir="${dir.stage}/tests" destdir="${dir.build}/classes/tests" includes="**/*.java"
           debug="${javac.debug}" optimize="${javac.optimize}" encoding="UTF-8"
           deprecation="${javac.deprecation}" source="1.4" target="1.4">
      <classpath>
        <path refid="path.class"/>
        <pathelement location="${dir.build}/classes/main"/>
        <pathelement location="${lib.junit}"/>
      </classpath>
    </javac>
  </target>

  <target name="genjavadoc" depends="stage"
          description="Compile all of the Java API documentation.">
    <mkdir dir="${dir.build}/doc/api"/>
    <javadoc destdir="${dir.build}/doc/api" version="true" author="true" use="true"
             access="${javadoc.access}" windowtitle="RvSnoop ${version} API Documentation">
      <doctitle><![CDATA[<h1>RvSnoop ${version}</h1>]]></doctitle>
      <bottom><![CDATA[Copyright © 2002-${year} <a href="http://ianp.org/">Ian Phillips</a> and Örjan Lundberg.]]></bottom>
      <packageset dir="${dir.stage}/src" defaultexcludes="true" includes="**"/>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api" offline="${javadoc.offline}"/>
      <link href="http://www.xom.nu/apidocs" offline="${javadoc.offline}"/>
      <classpath refid="path.class"/>
    </javadoc>
  </target>

  <target name="runtests" depends="compile" description="Run the unit tests.">
    <mkdir dir="${dir.build}/doc/developer/tests"/>
    <junit printsummary="true" haltonerror="true" fork="true" forkmode="perBatch">
      <classpath>
        <path refid="path.class"/>
        <pathelement location="${dir.build}/classes/main"/>
        <pathelement location="${dir.build}/classes/tests"/>
      </classpath>
      <formatter type="plain"/>
      <batchtest todir="${dir.build}/doc/developer/tests">
        <fileset dir="${dir.build}/classes/tests">
          <include name="**/*Test.class"/>
          <!-- The are all abstract an will cause the tests to fail if run. -->
          <exclude name="org/rvsnoop/RecordLedgerTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="dist" depends="runtests, analyze, genjavadoc"
          description="Package all files required for a binary distribution.">
    <echo>Preparing the distribution file layout.</echo>
    <mkdir dir="${dir.dist}/bin"/>
    <mkdir dir="${dir.dist}/doc"/>
    <mkdir dir="${dir.dist}/lib"/>
    <mkdir dir="${dir.dist}/src"/>
    <echo>Copying in the version file.</echo>
    <copy file="${dir.stage}/version.xml" todir="${dir.dist}"/>
    <echo>Copying in the launcher scripts.</echo>
    <copy todir="${dir.dist}/bin">
      <fileset dir="${dir.stage}/bin" includes="*"/>
    </copy>
    <chmod dir="${dir.dist}/bin" includes="*.sh" perm="750"/>
    <echo>Copying in the documentation.</echo>
    <copy todir="${dir.dist}/doc">
      <fileset dir="${dir.build}/doc"/>
    </copy>
    <copy todir="${dir.dist}/doc">
      <fileset dir="${dir.stage}/doc" includes="**/*"/>
    </copy>
    <echo>Copying in the runtime libraries.</echo>
    <jar jarfile="${dir.dist}/lib/rvsnoop.jar" compress="false"
      manifestencoding="UTF-8" index="true">
      <manifest>
        <attribute name="Implementation-Title" value="RvSnoop"/>
        <attribute name="Implementation-Version" value="${version}"/>
        <attribute name="Implementation-Vendor" value="Örjan Lundberg &amp; Ian Phillips"/>
        <attribute name="Implementation-URL" value="http://rvsnoop.org/"/>
      </manifest>
      <fileset dir="${dir.build}/classes/main" includes="**/*.class"/>
      <fileset dir="${dir.stage}/src" includes="**/*.png, **/*.properties"/>
    </jar>
    <copy todir="${dir.dist}/lib">
      <fileset file="${lib.binding}"/>
      <fileset file="${lib.forms}"/>
      <fileset file="${lib.glazed}"/>
      <fileset file="${lib.io}"/>
      <fileset file="${lib.lang}"/>
      <fileset file="${lib.logging}"/>
      <fileset file="${lib.looks}"/>
      <fileset file="${lib.xmlenc}"/>
      <fileset file="${lib.xom}"/>
    </copy>
    <echo>Copying in the source code.</echo>
    <copy todir="${dir.dist}/src">
      <fileset dir="${dir.stage}/src" includes="**/*.java, **/*.properties"/>
    </copy>
    <echo>Packaging the distributable.</echo>
    <tar destfile="rvsnoop-${version}.tgz" compression="gzip">
      <tarfileset dir="${dir.dist}/.." mode="440" dirmode="550">
        <include name="**/*.*"/>
        <include name="rvsnoop-${version}/${file.version}"/>
        <exclude name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
      <tarfileset dir="${dir.dist}/.." mode="750" dirmode="550">
        <include name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
    </tar>
  </target>

  <target name="release" depends="dist"
          description="Upload the files to SourceForge ready for releasing.">
    <input addproperty="release.email">Enter the email address to use for anonymous FTP:</input>
    <ftp server="upload.sourceforge.net" userid="anonymous" binary="true" password="${release.email}">
      <fileset file="rvsnoop-${version}.tgz"/>
    </ftp>
    <echo>Now do the SourceForge file release</echo>
    <echo>Then run "ant releasewww" to upload the new site version.</echo>
  </target>

  <target name="releasewww" depends="stage"
          description="Publish the files to the web server.">
    <input addproperty="ssh.user">Enter your SSH username:</input>
    <input addproperty="ssh.pass">Enter your SSH password:</input>
    <scp todir="${ssh.user}@rvsnoop.org:/users/home/iphillips/domains/rvsnoop.org/web/public"
      password="${ssh.pass}" trust="false">
        <fileset dir="${dir.stage}/www" include="**/*"/>
        <fileset dir="${dir.stage}" include="version.xml"/>
    </scp>
  </target>

  <target name="analyze" depends="compile"
          description="Analyze the code base and generate reports.">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
             classpath="${lib.pmd}"/>
    <pmd shortFilenames="true" encoding="UTF-8">
      <ruleset>rvsnoop.pmd</ruleset>
      <formatter type="html" toFile="${dir.build}/doc/developer/pmdreport.html"
                 linkPrefix="file://../../src/"/>
      <fileset dir="${dir.stage}/src" includes="**/*.java"/>
    </pmd>
  </target>

  <target name="clean"
          description="Remove all of the generated files.">
    <delete dir="${dir.build}/"/>
    <delete dir="${dir.dist}/"/>
    <delete dir="${dir.stage}/"/>
    <delete file="rvsnoop-${version}.tgz"/>
  </target>

</project>
